#
# build Replicant on MacOS X / Darwin
#
# tested and debugged on OS X 10.6.8 with Xcode 3.2.6 (gcc 4.2)
#
# usage: mrep { -s | -u | -l | -r | -c } { -d | -k | -b | -f | -n | -m action }
#

[ "$REPLICANT" ] || export REPLICANT=4.2	# default
[ "$DESTDIR" ] || export DESTDIR=$PWD
[ "$VOLUME" ] || export VOLUME="/Volumes/CaseSensitive"
[ "$LOCAL_MANIFEST" ] || export LOCAL_MANIFEST="please specify"
[ "$LOCAL_TOOLCHAIN" ] || export LOCAL_TOOLCHAIN=""	# none specified - use built-in toolchain

THIS=$PWD

# protect against copying/storing ._ files
export COPY_EXTENDED_ATTRIBUTES_DISABLED=true
# for 10.5
export COPYFILE_DISABLE=true

cd "$VOLUME" || (
	echo "please manually create a very large case sensitive working disk image (each replicant version eats 20-25 GB):"
	if [ ! -r replicant.sparsebundle ]
	then
		echo "   hdiutil create -type SPARSEBUNDLE -fs 'Case-sensitive Journaled HFS+' -size 50g -volname Workspace-CaseSensitive replicant.sparsebundle"
	fi
	echo "   open replicant.sparsebundle"
	exit 1
)

if [ ! -x tools/repo ]
then
	echo "*** fetching the repo tool ***"
	mkdir -p tools
	REPO="https://dl-ssl.google.com/dl/googlesource/git-repo/repo"
	[ -x "$(which wget)" ] &&
		wget -O - $REPO > tools/repo ||
		curl $REPO > tools/repo
	chmod a+x tools/repo
fi

if [ -x replicant-$REPLICANT ]
then
	echo "*** switching to replicant-$REPLICANT ***"
	cd replicant-$REPLICANT/
else
	echo "*** initializing to replicant-$REPLICANT ***"
	mkdir -p replicant-$REPLICANT
	cd replicant-$REPLICANT/
	../tools/repo init -u git://gitorious.org/replicant/manifest.git -b replicant-$REPLICANT
fi

if [ ! -e .repo/local_manifests/gta04.xml ]
then
	echo "*** installing local GTA04 manifest ***"
	mkdir -p .repo/local_manifests
	MANIFEST="http://git.goldelico.com/?p=gta04-replicant.git;a=blob_plain;f=local_manifests/gta04-replicant-$REPLICANT.xml;hb=refs/heads/master"
	[ -x "$(which wget)" ] &&
		wget -O - $MANIFEST > .repo/local_manifests/gta04.xml ||
		curl $MANIFEST > .repo/local_manifests/gta04.xml
fi

while true
do
	case "$1" in
	-c )
		shift
		echo "*** -c make clean ***"

		make clean || exit 1

		;;
	-u )
		# sync and apply local patches
		shift

		echo "*** syncing replicant-$REPLICANT ***"
		../tools/repo sync gta04-replicant.git gta04-replicant-device.git gta04-replicant-vendor.git gta04-kernel.git || exit 1
		vendor/replicant/get-prebuilts

		;;
	-s )
		# sync and apply all patches
		shift

		echo "*** syncing replicant-$REPLICANT ***"
		../tools/repo sync || exit 1
		vendor/replicant/get-prebuilts

		( cd $THIS/replicant/$REPLICANT && find . -name '*.patch' -print ) | while read PATCH
			do
			DIR=$(dirname "$PATCH")
			echo "*** patching $PATCH in $DIR ***"
			( cd $DIR && pwd && git am -3 $THIS/replicant/$REPLICANT/$PATCH ) || exit 1
			done
		;;
	-r )
		shift
		
		echo "*** using manifest for git.goldelico.com ***"
		rm -f .repo/local_manifests/z.xml	# disable localhost git
		;;
	-l )
		shift

		echo "*** using manifest to access localhost ***"
		cp $LOCAL_MANIFEST .repo/local_manifests/z.xml	# enable localhost git
		;;
	-* )
		echo "usage: mrep { -s | -u | -l | -r | -c } { -d | -k | -b | -f | -n | -m action }"
		echo
		echo "  before build:"
		echo "  -s: repo sync everything and apply local patches"
		echo "  -u: repo sync (i.e. update)"
		echo "  -l: switch to local manifest"
		echo "  -r: switch to published (remote) manifest"
		echo "  -c: force clean build"
		echo "   default is none of these steps"
		echo
		echo "  after build:"
		echo "  -d: enable debug (show commands)"
		echo "  -k: make kernel (only)"
		echo "  -f: make rootfs"
		echo "  -b: create single partition (binary) rootfs (for 2.3)"
		echo "  -n: create single partition (binary) rootfs (for 4.x)"
		echo "  -m: run specified action"
		echo "   4.x default is -f -k -n"
		echo "   2.3 default is -f -b"
		exit 1
		;;
	* )
		break
		;;
	esac
done

echo "*** envsetup ***"

source build/envsetup.sh

if [ "$(uname)" == "Darwin" ]
then
	echo "*** preparing Darwin compilers ***"
	# this has been developed and tested on Mac OS X 10.6.8 (HOSTCC specific libraries and tools) with Xcode 3.2.6 (gcc/llvm-gcc-4.2)
	if [ ! -r out/host/darwin-x86/include/elf.h ]
	then
		echo "*** getting elf.h ***"
		mkdir -p out/host/darwin-x86/bin out/host/darwin-x86/include
		curl 'http://sourceware.org/git/?p=glibc.git;a=blob_plain;f=elf/elf.h&hb=HEAD' > out/host/darwin-x86/include/elf.h
		sed -i.bak 's|#include <features.h>|// #include <features.h>|g' out/host/darwin-x86/include/elf.h
		sed -i.bak 's|__BEGIN_DECLS|// __BEGIN_DECLS|g' out/host/darwin-x86/include/elf.h
		sed -i.bak 's|__END_DECLS|// __END_DECLS|g' out/host/darwin-x86/include/elf.h
#		cp $THIS/replicant/$REPLICANT/elf.h out/host/darwin-x86/include/elf.h
	fi
	case "$REPLICANT" in
	2.3 )
		# for Replicant-2.3 we need standard gcc (not llvm-gcc) and have to explicitly add libstdc++ to avoid some errors
		# g++ compilation needs libstdc++; this will print a harmless warning for standard C (e.g. when building the kernel)
		cat >out/host/darwin-x86/bin/gcc <<END
# echo /usr/bin/gcc-4.2 -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $VOLUME/replicant-2.3/kernel/goldelico/gta04/include '-DACCESSPERMS=(S_IRWXU|S_IRWXG|S_IRWXO)' \$@ -lSystem -lstdc++
/usr/bin/gcc-4.2 -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $VOLUME/replicant-2.3/kernel/goldelico/gta04/include '-DACCESSPERMS=(S_IRWXU|S_IRWXG|S_IRWXO)' \$@ -lSystem -lstdc++
END
		chmod +x out/host/darwin-x86/bin/gcc
		ln -sf gcc out/host/darwin-x86/bin/cc
		ln -sf gcc out/host/darwin-x86/bin/g++
		;;
	4.0 )
		# for Replicant-4.0 we need llvm-gcc or we will run into a compiler/assembler bug
		# and we need to include some Linux header files to compile the tools
		# and we have to -DASSEMBLY to avoid some conflicts with the file descriptor types
		# but only for a 3.0 kernel and not 3.12? So we can make it conditional on LOCAL_TOOLCHAIN
		[ "$LOCAL_TOOLCHAIN" ] || HOSTCFLAGS="-D__ASSEMBLY__"
		cat >out/host/darwin-x86/bin/gcc <<END
/usr/bin/llvm-gcc-4.2 -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
END
		chmod +x out/host/darwin-x86/bin/gcc
		ln -sf gcc out/host/darwin-x86/bin/cc
		;;
	4.2 )
		# for Replicant-4.0 we need llvm-gcc or we will run into a compiler/assembler bug
		# and we need to include some Linux header files to compile the tools
		# and we have to -DASSEMBLY to avoid some conflicts with the file descriptor types
		# but only for a 3.0 kernel and not 3.12? So we can make it conditional on LOCAL_TOOLCHAIN
		[ "$LOCAL_TOOLCHAIN" ] || HOSTCFLAGS="-D__ASSEMBLY__"
		cat >out/host/darwin-x86/bin/gcc <<END
/usr/bin/llvm-gcc-4.2 -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
END
		export LOADADDR=0x80008000
		chmod +x out/host/darwin-x86/bin/gcc
		ln -sf gcc out/host/darwin-x86/bin/cc
		;;
	* )
		echo "*** don't know how to compile Replicant-$REPLICANT ***"
		exit 1
	esac
	echo HOSTCC: $(cat out/host/darwin-x86/bin/gcc)
	# we need a find that understands -printf from MacPorts
	if [ ! -x /opt/local/bin/gfind ]
	then
		echo "*** sudo port install coreutils findutils gsed gxargs ***"
		# sudo port install coreutils findutils gsed gxargs
	fi
	ln -sf /opt/local/bin/gfind out/host/darwin-x86/bin/find
	ln -sf /opt/local/bin/gstat out/host/darwin-x86/bin/stat
	ln -sf /opt/local/bin/greadlink out/host/darwin-x86/bin/readlink
	ln -sf /opt/local/bin/gsed out/host/darwin-x86/bin/sed
	ln -sf /opt/local/bin/gxargs out/host/darwin-x86/bin/xargs
	ln -sf "$(which gnutar)" out/host/darwin-x86/bin/tar

	if [ ! -r out/host/darwin-x86/bin/mkimage ]
	then
		curl http://download.goldelico.com/gta04/unstable/scripts/darwin/mkimage > out/host/darwin-x86/bin/mkimage
		chmod a+x out/host/darwin-x86/bin/mkimage
	fi
	PATH=$PWD/out/host/darwin-x86/bin:$PATH
	ls -l out/host/darwin-x86/bin/
fi

echo "*** lunch replicant_gta04-eng ***"

lunch replicant_gta04-eng
export ANDROID_JAVA_HOME=$JAVA_HOME

COMMANDS="$@"
case "$REPLICANT" in
	2.3 )
		[ "$COMMANDS" ] || COMMANDS="-f -k -n"
		;;
	4.* )
		[ "$COMMANDS" ] || COMMANDS="-f -b"
		;;
esac

echo "*** run $COMMANDS ***"
mkdir -p "$DESTDIR"

for i in $COMMANDS
do
	case "$i" in
	-m )
		CMD=$(echo $COMMANDS | sed 's/.*-m//')
		echo "*** make $CMD ***"
		make $CMD || exit 1
		exit
		;;

	-d )
		echo "*** -d show build commands ***"
		SHOWCOMMANDS=showcommands
		;;
	-f )
		echo "*** -r make rootfs ***"

		make bootimage BOARD_SDCARD_INIT:=true || exit 1
		make $SHOWCOMMANDS systemtarball || exit 1

		;;
	-k )
		echo "*** -k make kernel (only) ***"

		# check if we have 'mkimage'
		# make bootloaderimage	# we need mkimage before building the kernel

		# patch kernel config not to use initramfs
		sed -i.bak 's|CONFIG_INITRAMFS_SOURCE="../../root"|CONFIG_INITRAMFS_SOURCE=""|g' kernel/goldelico/gta04/arch/arm/configs/gta04_defconfig && rm kernel/goldelico/gta04/arch/arm/configs/gta04_defconfig.bak &&

		make $SHOWCOMMANDS bootimage BOARD_SDCARD_INIT:=true || exit 1
		echo "*** copy to $DESTDIR/unstable/kernel ***"
		mkdir -p "$DESTDIR/unstable/"
		cp out/target/product/gta04/kernel "$DESTDIR/unstable/kernel"
		;;
	-b )
		echo "*** -b create single partition rootfs $DESTDIR/gta04-rootfs.tar.gz ***"

		./goldelico/scripts/mkrootfs.sh || exit 1

		echo "*** copy to $DESTDIR/unstable.tbz ***"
		cp "out/target/product/gta04/gta04-rootfs.tar.bz2" "$DESTDIR/unstable-replicant.tbz"
		chmod a+r "$DESTDIR/unstable-replicant.tbz"
		;;
	-n )
		echo "*** copy to $DESTDIR/unstable/system.tar.bz2 ***"
		mkdir -p "$DESTDIR/unstable/"
		cp "out/target/product/gta04/system.tar.bz2" "$DESTDIR/unstable/system.tar.bz2" || exit 1
		chmod a+r "$DESTDIR/unstable/system.tar.bz2"

		echo "*** -n create $DESTDIR/unstable/rootfs.tar.bz2 without initramdisk ***"
		(
		cd out/target/product/gta04 && 
		rm -rf rootfs/boot rootfs/sbin/init &&
		mkdir -p rootfs/boot &&
		ln -s system/lib rootfs/lib &&
		# make a flat file system
		(cd root && tar cf - .) | (cd rootfs && tar xf -) &&
		(tar cf - system recovery kernel) | (cd rootfs && tar xf -) &&
		sed -i.bak 's|mount |#mount |g' rootfs/init.rc && rm rootfs/init.rc.bak &&
		sed -i.bak 's|mount |#mount |g' rootfs/init.gta04.rc && rm rootfs/init.gta04.rc.bak &&
		sed -i.bak 's|on fs|#on fs|g' rootfs/init.rc && rm rootfs/init.rc.bak && # /init segfaults if there are no commands in 'on fs'
		sed -i.bak 's|on fs|#on fs|g' rootfs/init.gta04.rc && rm rootfs/init.gta04.rc.bak && # /init segfaults if there are no commands in 'on fs'
		ln -sf ../kernel rootfs/boot/uImage &&
		ln -sf ../init rootfs/sbin/init &&
		tar cjvf rootfs.tar.bz2 --exclude .DS_Store -C rootfs .
		) &&
		cp "out/target/product/gta04/rootfs.tar.bz2" "$DESTDIR/unstable/rootfs.tar.bz2"
		chmod a+r "$DESTDIR/unstable/rootfs.tar.bz2"
		;;
	* )
		echo "*** unknown command $i ignored ***"
		echo "before sync & initialization"
		echo "-l use local git files (from file://localhost/...)"
		echo "-r use remote git files (from git.goldelico.com)"
		echo "-s sync everything"
		echo "-u update gta04 parts only"
		echo "-c make clean"
		echo "after sync & initialization"
		echo "-d show build commands"
		echo "-k build kernel"
		echo "-b build single-partition gta04-rootfs (4.*)"
		echo "-f build system (2.3)"
		echo "-n patch system to single-partition rootfs"
		echo "-m make targets; e.g. -m clean-wpa_supplicant"
		;;
	esac
done

echo "*** result ***"

ls -l "$DESTDIR"
