#
# build Replicant on MacOS X / Darwin
#
# tested and debugged on OS X 10.11.6 with Xcode 7.3.1 (llvm / clang 7.3.0) and jdk-8u101
#

[ "$REPLICANT" ] || export REPLICANT=4.2	# default
[ "$DESTDIR" ] || export DESTDIR=$PWD
[ "$VOLUME" ] || export VOLUME="/Volumes/CaseSensitive"
[ "$SERVER" ] || export SERVER="/Volumes/Server HD/"
[ "$REPO" ] || export 	REPO="https://storage.googleapis.com/git-repo-downloads/repo"
[ "$REMOTE_MANIFEST" ] || export REMOTE_MANIFEST=https://replicantmirror.fossencdi.org/replicant/manifest
# export GIT_SSL_NO_VERIFY=true	# we can decide to ignore that REMOTE_MANIFEST has an invalid certificate...
[ "$LOCAL_MANIFEST" ] || export LOCAL_MANIFEST="please specify"
[ "$LOCAL_TOOLCHAIN" ] || export LOCAL_TOOLCHAIN=""	# none specified - use built-in toolchain

function usage {
	echo "usage: mrep [ -R version ] [ -C ] { -v branch | -s | -u | -l | -r | -c | -d | -o file | -mail mail@host } { -k | -b | -f | -n | -m action }"
	echo
	echo "  before build (setup):"
	echo "  -R version: replicant version (known: 2.3, 4.0, 4.2, 6.0)"
	echo "  -C: wipe out whole workspace to trigger fresh load (waits 10 seconds to abort)"
	echo "  -v branch: checkout remote manifest from this branch"
	echo "  -o file: name of output file"
	echo "  -mail address: notify by mail when started and when done"
	echo "  -s: repo sync everything and apply local patches"
	echo "  -u: repo sync (i.e. update) gta04 support"
	echo "  -l: switch to a local manifest"
	echo "  -r: switch to a published (remote) manifest"
	echo "  -c: force clean build"
	echo "  -d: enable debug (show commands)"
	echo "   default is none of these"
	echo
	echo "  build commands:"
	echo "  -k: make kernel (only)"
	echo "  -f: make rootfs"
	echo "  -b: create single partition (binary) rootfs (for 2.3)"
	echo "  -n: create single partition (binary) rootfs (for 4.x or 6.x)"
	echo "  -m: run specified action"
	echo "   4.x and 6.x default is -f -k -n"
	echo "   2.3 default is -f -b"
}

if [ "$1" = "-R" ]
then
	shift
	REPLICANT="$1"
	echo "*** selected Replicant $REPLICANT ***"
	shift
fi

[ -x "$(dirname "$DESTDIR")" ] || {
	echo "server down - can't reach $DESTDIR to store resulting package"
	mkdir -p "$SERVER"
	if mount_smbfs "//$USER:$(cat ~/.ssh/www.goldelico.com)@www.goldelico.com/Server%20HD" "$SERVER"
	then
		echo "*** successfully mounted as $SERVER ***"
	else
		rmdir "$SERVER"
		exit 1
	fi
}

THIS=$PWD

# protect against copying/storing ._ files
export COPY_EXTENDED_ATTRIBUTES_DISABLED=true
# for 10.5
export COPYFILE_DISABLE=true
# to compile on OS X 10.9 with SDK 10.9 we need to set this variable (even if we still have Xcode 3.2 installed)
export BUILD_MAC_SDK_EXPERIMENTAL=1

cd "$VOLUME" || (
	echo "please manually create a very large case sensitive working disk image (each replicant version eats 20-25 GB):"
	if [ ! -r replicant.sparsebundle ]
	then
		echo "   hdiutil create -type SPARSEBUNDLE -fs 'Case-sensitive Journaled HFS+' -size 50g -volname $(basename $VOLUME) replicant.sparsebundle"
	fi
	echo "   open replicant.sparsebundle"
	exit 1
)

if [ "$1" = "-C" ]
then
	shift
	echo "*** wiping out whole workspace in 10 seconds (ctl-C to abort) ***"
	sleep 10
	echo "*** now wiping out ***"
	rm -rf "./tools" "./replicant-$REPLICANT"
# FIXME: can we force -s?
fi

if [ ! -x tools/repo ]
then
	echo "*** fetching the repo tool ***"
	mkdir -p tools
	[ -x "$(which wget)" ] &&
		wget -O - $REPO > tools/repo ||
		curl $REPO > tools/repo
	chmod a+x tools/repo
fi

if [ -x replicant-$REPLICANT/build/envsetup.sh ]
then
	echo "*** switching to replicant-$REPLICANT ***"
	cd replicant-$REPLICANT/
else
	echo "*** initializing to replicant-$REPLICANT ***"
	mkdir -p replicant-$REPLICANT
	cd replicant-$REPLICANT/
	../tools/repo init -u "$REMOTE_MANIFEST" -b "replicant-$REPLICANT" || (rm -rf ../replicant-$REPLICANT/)
fi

OUTFILE=rootfs.tar.bz2
VERSION=master

while true
do
	case "$1" in
	-v )
		shift
		VERSION=$1
		;;

	-c )
		echo "*** -c make clean ***"

		make clean || exit 1
		;;

	-u )	# sync and apply local patches

		echo "*** syncing replicant-$REPLICANT ***"
		../tools/repo sync gta04-replicant.git gta04-replicant-device.git gta04-replicant-vendor.git gta04-kernel.git || exit 1
		vendor/replicant/get-prebuilts
		;;

	-s )	# sync and apply all patches
		echo "*** syncing replicant-$REPLICANT ***"
		../tools/repo sync || exit 1
		vendor/replicant/get-prebuilts

		( cd $THIS/patches/$REPLICANT && find . -name '*.patch' -print ) | while read PATCH
			do
			DIR=$(dirname "$PATCH")
			echo "*** patching $PATCH in $DIR ***"
			( cd $DIR && pwd && git am -3 $THIS/replicant/$REPLICANT/$PATCH ) || exit 1
			done
		;;

# FIXME: require to specify the branch name $VERSION as -r parameter?
	-r )
		echo "*** installing remote GTA04 manifest from branch $VERSION ***"
		mkdir -p .repo/local_manifests
		MANIFEST="http://git.goldelico.com/?p=gta04-replicant.git;a=blob_plain;f=local_manifests/gta04-replicant-$REPLICANT.xml;hb=refs/heads/$VERSION"
		[ -x "$(which wget)" ] &&
			wget -O - $MANIFEST > .repo/local_manifests/gta04.xml ||
			curl $MANIFEST > .repo/local_manifests/gta04.xml

		rm -f .repo/local_manifests/local-dev.xml	# disable any localhost git
		;;

# FIXME: require to specify the local file $LOCAL_MANIFEST as -l parameter?
	-l )
		echo "*** using manifest to access localhost ***"

		echo "broken"; exit 1

		# name of local manifest must come after "gta04.xml" to be able to overwrite
		cp $LOCAL_MANIFEST .repo/local_manifests/local-dev.xml	# enable localhost git
		;;

	-o )
		shift;
		OUTFILE="$1"
		;;

	-mail )
		shift;
		MAILTO="$1"
		;;

	-d )
		SHOWCOMMANDS=showcommands
		;;

	"-?" )
		usage
		exit
		;;

	* )
		break
		;;

	esac
	shift;
done

if [ "$MAILTO" ]
then
	echo "*** sending mail notification to $MAILTO ***"
	START=$(date)
	(
		echo started: $START
		## include settings
	) | mail -s "mrep on $(hostname) started" "$MAILTO"
fi

echo "*** envsetup ***"

if [ ! -r build/envsetup.sh ]
then
	echo "*** envsetup.sh is missing - redo sync ***"
	exit 1
fi

source build/envsetup.sh

if [ "$(uname)" == "Darwin" ]
then
	echo "*** preparing Darwin compilers ***"
	# this has been developed and tested on Mac OS X 10.6.8 (HOSTCC specific libraries and tools) with Xcode 3.2.6 (gcc/llvm-gcc-4.2)
	if [ ! -r out/host/darwin-x86/include/elf.h ]
	then
		echo "*** getting elf.h ***"
		mkdir -p out/host/darwin-x86/bin out/host/darwin-x86/include
		curl 'http://sourceware.org/git/?p=glibc.git;a=blob_plain;f=elf/elf.h&hb=HEAD' > out/host/darwin-x86/include/elf.h
		sed -i.bak 's|#include <features.h>|// #include <features.h>|g' out/host/darwin-x86/include/elf.h
		sed -i.bak 's|__BEGIN_DECLS|// __BEGIN_DECLS|g' out/host/darwin-x86/include/elf.h
		sed -i.bak 's|__END_DECLS|// __END_DECLS|g' out/host/darwin-x86/include/elf.h
#		cp $THIS/replicant/$REPLICANT/elf.h out/host/darwin-x86/include/elf.h
	fi
	case "$REPLICANT" in
	2.3 )
		# for Replicant-2.3 we need standard gcc (not llvm-gcc) and have to explicitly add libstdc++ to avoid some errors
		# g++ compilation needs libstdc++; this will print a harmless warning for standard C (e.g. when building the kernel)
		cat >out/host/darwin-x86/bin/gcc <<END
# echo /usr/bin/gcc-4.2 -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $VOLUME/replicant-2.3/kernel/goldelico/gta04/include '-DACCESSPERMS=(S_IRWXU|S_IRWXG|S_IRWXO)' \$@ -lSystem -lstdc++
/usr/bin/gcc-4.2 -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $VOLUME/replicant-2.3/kernel/goldelico/gta04/include '-DACCESSPERMS=(S_IRWXU|S_IRWXG|S_IRWXO)' \$@ -lSystem -lstdc++
END
		chmod +x out/host/darwin-x86/bin/gcc
		ln -sf gcc out/host/darwin-x86/bin/cc
		ln -sf gcc out/host/darwin-x86/bin/g++
		;;
	4.0 )
		# for Replicant-4.0 we need llvm-gcc or we will run into a compiler/assembler bug
		# and we need to include some Linux header files to compile the tools
		# and we have to -DASSEMBLY to avoid some conflicts with the file descriptor types
		# but only for a 3.0 kernel and not 3.12? So we can make it conditional on LOCAL_TOOLCHAIN
		[ "$LOCAL_TOOLCHAIN" ] || HOSTCFLAGS="-D__ASSEMBLY__"
		cat >out/host/darwin-x86/bin/gcc <<END
/usr/bin/llvm-gcc-4.2 -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
END
		chmod +x out/host/darwin-x86/bin/gcc
		ln -sf gcc out/host/darwin-x86/bin/cc
		;;
	4.2 | 6.0 )
		# for Replicant-4.2 we need llvm-gcc or we will run into a compiler/assembler bug
		# and we need to include some Linux header files to compile the tools
		# and we have to -DASSEMBLY to avoid some conflicts with the file descriptor types
		[ "$LOCAL_TOOLCHAIN" ] || HOSTCFLAGS="-D__ASSEMBLY__"
		case "$(uname -r)" in
			15.* )	# 10.11
				sed -i.bak 's|mac_sdk_versions_supported :=  10.9 10.7 10.8|mac_sdk_versions_supported :=  10.11 10.10 10.9 10.7 10.8|g' build/core/combo/HOST_darwin-x86.mk
				sed -i.bak 's/javac_version := $(shell javac -version 2>&1 | head -n 1 | grep '\''[ "]1\\.[67][\\. "$$]'\'')/javac_version := $(shell javac -version 2>&1 | head -n 1 | grep '\''[ "]1\\.[6789][\\. "$$]'\'')/g' build/core/main.mk &&
				sed -i.bak 's/(info The correct version is: 1.6 or 1.7.)/(info The correct version is: 1.6 or 1.7 or 1.8 or 1.9.)/g' build/core/main.mk

				cat >out/host/darwin-x86/bin/gcc <<END
# echo /usr/bin/cc -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
/usr/bin/cc -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
END
				cat >out/host/darwin-x86/bin/g++ <<END
# echo /usr/bin/c++ -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
/usr/bin/c++ -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
END
				chmod +x out/host/darwin-x86/bin/gcc
				chmod +x out/host/darwin-x86/bin/g++
			;;
			13.* )	# 10.9
				cat >out/host/darwin-x86/bin/gcc <<END
# echo /usr/bin/cc -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
/usr/bin/cc -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
END
				cat >out/host/darwin-x86/bin/g++ <<END
# echo /usr/bin/c++ -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
/usr/bin/c++ -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
END
				chmod +x out/host/darwin-x86/bin/gcc
				chmod +x out/host/darwin-x86/bin/g++
			;;
			10.* )	# 10.6.8
				cat >out/host/darwin-x86/bin/gcc <<END
/opt/local/bin/llvm-gcc-4.2 -I$VOLUME/replicant-$REPLICANT/out/host/darwin-x86/include -idirafter /usr/include/sys -idirafter $PWD/kernel/goldelico/gta04/include -idirafter $PWD/kernel/goldelico/gta04/include/uapi -idirafter $PWD/kernel/goldelico/gta04/arch/x86/include/uapi -D__GNU_LIBRARY__  $HOSTCFLAGS \$@
END
				chmod +x out/host/darwin-x86/bin/gcc
			;;
			*)
				echo unknown uname: $(uname -r)
				exit 1
				;;
		esac
		export LOADADDR=0x80008000
		rm out/host/darwin-x86/bin/cc
		rm out/host/darwin-x86/bin/c++
		ln -sf gcc out/host/darwin-x86/bin/cc
		ln -sf g++ out/host/darwin-x86/bin/c++
		;;
	* )
		echo "*** don't know how to compile Replicant-$REPLICANT ***"
		exit 1
	esac
	echo HOSTCC: $(cat out/host/darwin-x86/bin/gcc)
	# we need a find that understands -printf from MacPorts
	if [ ! -x /opt/local/bin/gfind ]
	then
		echo "*** sudo port install coreutils findutils gsed gxargs ***"
		# sudo port install coreutils findutils gsed gxargs
	fi
	ln -sf /opt/local/bin/gfind out/host/darwin-x86/bin/find
	ln -sf /opt/local/bin/gstat out/host/darwin-x86/bin/stat
	ln -sf /opt/local/bin/greadlink out/host/darwin-x86/bin/readlink
	ln -sf /opt/local/bin/gsed out/host/darwin-x86/bin/sed
	ln -sf /opt/local/bin/gxargs out/host/darwin-x86/bin/xargs
	ln -sf "$(which gnutar)" out/host/darwin-x86/bin/tar

	if [ ! -r out/host/darwin-x86/bin/mkimage ]
	then
		curl http://download.goldelico.com/gta04/unstable/scripts/darwin/mkimage > out/host/darwin-x86/bin/mkimage
		chmod a+x out/host/darwin-x86/bin/mkimage
	fi
	case "$(uname -r)" in
		15.* )	# 10.11
			# on 10.11 we use the Xcode 7 tools in /usr/bin through our script in out/host/darwin-x86/bin
			PATH=$PWD/out/host/darwin-x86/bin:$PATH
			;;
		13.* )	# 10.9
			# on 10.9 we use the Xcode 6 tools in /usr/bin through our script in out/host/darwin-x86/bin
			PATH=$PWD/out/host/darwin-x86/bin:$PATH
			;;
		10.* ) # 10.6
			# Replicant 4 works best with SDK 10.6 and Xcode 3.2
			PATH=$PWD/out/host/darwin-x86/bin:/Xcode3.2/usr/bin:$PATH
			;;
		*)
			echo unknown uname: $(uname -r)
			exit 1
			;;
	esac
	ls -l out/host/darwin-x86/bin/
fi

echo "*** applying patches ***"

# bug in code makes clang report an error - fixed in Android 5.0
sed -i.bak "s|sizeof((header->version)) != 0))|sizeof(header->version)) != 0)|g" frameworks/compile/libbcc/lib/Renderscript/RSInfoReader.cpp

echo "*** lunch replicant_gta04-eng ***"

lunch replicant_gta04-eng
export ANDROID_JAVA_HOME=$JAVA_HOME

if [ ! "$1" ]
then # set default commands
	case "$REPLICANT" in
		2.3 )
			set -- -f -b
			;;
		4.* | 6.* )
			set -- -f -k -n
			;;
	esac
fi

echo "*** run $COMMANDS ***"
mkdir -p "$DESTDIR"

for i
do
	case "$i" in
	-m )
		shift
		echo "*** make $@ ***"
		make "$@" || exit 1
		exit
		;;

	-f )
		echo "*** -f make rootfs ***"

		make bootimage BOARD_SDCARD_INIT:=true || exit 1
		make $SHOWCOMMANDS systemtarball || exit 1

		;;
	-k )
		echo "*** -k make kernel (only) ***"

		# check if we have 'mkimage'
		# make bootloaderimage	# we need mkimage before building the kernel

		# patch kernel config not to use initramfs
		sed -i.bak 's|CONFIG_INITRAMFS_SOURCE="../../root"|CONFIG_INITRAMFS_SOURCE=""|g' kernel/goldelico/gta04/arch/arm/configs/gta04_defconfig && rm kernel/goldelico/gta04/arch/arm/configs/gta04_defconfig.bak &&

		make $SHOWCOMMANDS bootimage BOARD_SDCARD_INIT:=true || exit 1
		echo "*** copy to $DESTDIR/unstable/kernel ***"
		mkdir -p "$DESTDIR/unstable/"
		cp out/target/product/gta04/kernel "$DESTDIR/unstable/kernel"
		;;
	-b )
		echo "*** -b create single partition rootfs $DESTDIR/gta04-rootfs.tar.gz ***"

		./goldelico/scripts/mkrootfs.sh || exit 1

		echo "*** copy to $DESTDIR/unstable.tbz ***"
		cp "out/target/product/gta04/gta04-rootfs.tar.bz2" "$DESTDIR/unstable-replicant.tbz"
		chmod a+r "$DESTDIR/unstable-replicant.tbz"
		;;
	-n )
		echo "*** -n copy to $DESTDIR/unstable/system.tar.bz2 ***"
		mkdir -p "$DESTDIR/unstable/"
		cp "out/target/product/gta04/system.tar.bz2" "$DESTDIR/unstable/system.tar.bz2" || exit 1
		chmod a+r "$DESTDIR/unstable/system.tar.bz2"

		echo "*** -n create $DESTDIR/unstable/$OUTFILE without initramdisk ***"
		(
		cd out/target/product/gta04 && 
		rm -rf rootfs/boot rootfs/sbin/init &&
		mkdir -p rootfs/boot &&
		ln -s system/lib rootfs/lib &&
		# make a flat file system
		(cd root && tar cf - .) | (cd rootfs && tar xf -) &&
		(tar cf - system recovery kernel) | (cd rootfs && tar xf -) &&
		sed -i.bak 's|mount |#mount |g' rootfs/init.rc && rm rootfs/init.rc.bak &&
		sed -i.bak 's|mount |#mount |g' rootfs/init.gta04.rc && rm rootfs/init.gta04.rc.bak &&
		sed -i.bak 's|on fs|#on fs|g' rootfs/init.rc && rm rootfs/init.rc.bak && # /init segfaults if there are no commands in 'on fs'
		sed -i.bak 's|on fs|#on fs|g' rootfs/init.gta04.rc && rm rootfs/init.gta04.rc.bak && # /init segfaults if there are no commands in 'on fs'
		ln -sf ../kernel rootfs/boot/uImage &&
		ln -sf ../init rootfs/sbin/init &&
		tar cjvf rootfs.tar.bz2 --exclude .DS_Store -C rootfs .
		) &&
		cp "out/target/product/gta04/rootfs.tar.bz2" "$DESTDIR/unstable/$OUTFILE"
		chmod a+r "$DESTDIR/unstable/$OUTFILE"
		;;
	* )
		echo "*** unknown command $i ignored ***"
		usage
		exit 1
		;;
	esac
	shift
done

if [ "$MAILTO" ]
then
	# send notification mail about success
	(echo started: $START ) | mail -s "makeallphp on $(hostname) started" hns@goldelico.com
	./makeallphp.sh 2>&1 >/usr/local/QuantumSTEP/Internal/Documents/intranet.goldelico.de/update.log
	(
		echo started: $START
		ls -l out/target/product/gta04
		echo finished: $(date)
	) | mail -s "mrep on $(hostname) finished" "$MAILTO"
fi

echo "*** result ***"

ls -l "$DESTDIR"
