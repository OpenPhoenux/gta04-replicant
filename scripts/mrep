#
# build Replicant on Letux Cortex 8 connected to MacOS X through USB ethernet-gadget
#

[ "$REPLICANT" ] || export REPLICANT=4.2	# default
[ "$REPO" ] || export 	REPO="https://storage.googleapis.com/git-repo-downloads/repo"
[ "$REMOTE_MANIFEST" ] || export REMOTE_MANIFEST=https://code.fossencdi.org/replicant_manifest.git
[ "$REMOTE_MANIFEST" ] || export REMOTE_MANIFEST=https://replicantmirror.fossencdi.org/replicant/manifest
[ "$LOCAL_MANIFEST" ] || export LOCAL_MANIFEST="please specify"

DEVICE=root@192.168.2.106
DEVICE=root@192.168.0.202

# NOTE: this is specific to Debian!
BUILD_TOOLS="gcc g++ bison default-jre xsltproc git wget curl rsync ca-certificates python"

function usage {
	echo "usage: mrep [ -eo] [ -R version ] [ -C ] { -v branch | -s | -u | -l | -r[suffix] | -co | -c | -d | -o file | -mail mail@host } { -k | -b | -f | -n | -m action }"
	echo
	echo "  on local host:"
	echo "  -e:              choose root@192.168.2.106 for the Letux Cortex 8"
	echo "  -o:              choose root@192.168.0.202 for the Letux Cortex 8 (default)"
	echo "  -R version:      select replicant version (known: 2.3, 4.0, 4.2, 6.0)"
	echo "  -o file:         name of output file"
	echo
	echo "  before build (setup):"
	echo "  -C:              wipe out whole workspace to trigger fresh load (waits 10 seconds to abort)"
	echo "  -co:             wipe out the 'out' directory"
	echo "  -c:              force make clean before make"
	echo "  -v branch:       checkout remote manifest from this branch"
	#echo "  -mail mail@host: notify by mail when started and when done"
	echo "  -s:              repo sync everything and apply local patches"
	echo "  -sf:             repo sync --force-sync everything and apply local patches"
	echo "  -u:              repo sync (i.e. update) gta04 support"
	#echo "  -l:              switch to a local manifest"
	echo "  -r[suffix]:      switch to a published (remote) manifest (with optional suffix)"
	#echo "  -cc version:     choose host cc/c++ version"
	echo "  -d:              enable debug (show commands)"
	echo "  -GSNV:           set GIT_SSL_NO_VERIFY=true to ignore invalid https certificates"
	echo "   default is none of these options"
	echo
	echo "  build commands:"
	echo "  -k:              make kernel (only)"
	echo "  -f:              make rootfs"
	echo "  -b:              create single partition (binary) rootfs (for 2.3)"
	echo "  -n:              create single partition (binary) rootfs (for 4.x or 6.x)"
	echo "  -m:              run specified action"
	echo "   4.x and 6.x default is -f -k -n"
	echo "   2.3 default is -f -b"
}

while [ "$1" ]
do
	case "$1" in
		-e )	DEVICE=root@192.168.2.106;;
		-o )	DEVICE=root@192.168.0.202;;
		-R )
			shift
			REPLICANT="$1"
			echo "*** selected Replicant $REPLICANT ***"
			;;
		-o )
			shift;
			OUTFILE="\$1"
			;;
		* ) 	break 2;;
	esac
	shift
done

JAVA_HOME=/usr/local/jdk
DIR=/replicant-$REPLICANT
TOOLS=/replicant-tools
OUTFILE=$(date "+%Y%m%d")-replicant.tbz
VERSION=master

# variables set inside the remote shell must be accessed through \$
# because the HERE-document expands $var

ssh -o StrictHostKeyChecking=no $DEVICE bash -s -- "$@" <<END || exit 1

# export GIT_TRACE=/git.log

echo "### ssh $DEVICE up and running"

THIS="\$PWD"

while [ "\$1" ]
do
	case "\$1" in
		-C )
			echo "*** Do you really want to wipe out the whole workspace (ctl-C to abort within the next 10 seconds)? ***"
			sleep 10
			echo "*** now wiping out ***"
			rm -rf "$TOOLS" "$DIR"
			ls -l "$TOOLS" "$DIR"
			;;
		* ) 	break 2;;
	esac
	shift
done

# can we/we can use default-jdk

if [ ! -d "$JAVA_HOME" ]
then
	echo "### no JDK installed"
	echo "  download jdk-8u*1-linux-arm32-vfp-hflt.tar.gz from"
	echo "  http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"
	echo "  after accepting the license"
	echo "then"
	echo "  JDK=location of the jdk-8u*1-linux-arm32-vfp-hflt.tar.gz"
	echo "  cd /usr/local"
	echo '  tar xvzf \\$JDK'
	echo "  ln -s /usr/local/jdk1.8.0_131 /usr/local/jdk"
	echo "then restart mrep"
	exit 1
fi

ls -l "$TOOLS/repo"
if [ ! -x "$TOOLS/repo" ]
then
	echo "### Setup required build tools"

	apt-get update && apt-get upgrade || exit 1
	apt-get install -y $BUILD_TOOLS || exit 1

	echo "### Setup the Source"

	mkdir -p $TOOLS || exit 1
	wget -O - http://commondatastorage.googleapis.com/git-repo-downloads/repo >$TOOLS/repo
	chmod a+x $TOOLS/repo
fi


if [ -r $DIR/build/envsetup.sh -o "$1" = "-s" -o "$1" = "-sf" -o "$1" = "-sb" ]
then
	echo "### Switch to Repo replicant-$REPLICANT ***"
	cd "$DIR/" || exit 1

else
	echo "### Initialize the Repo"
	mkdir -p "$DIR" || exit 1
	cd "$DIR/" || exit 1
	if ! ../$TOOLS/repo init -u "$REMOTE_MANIFEST" -b "replicant-$REPLICANT"
	then
		echo "*** repo init failed - run again with -C option ***"
		exit 1
	fi
	set -- -s "$@"	# force repo sync
fi

OUTFILE=rootfs.tar.bz2
VERSION=master

while [ "\$1" ]
do
	case "\$1" in
	-v )
		shift
		VERSION="\$1"
		;;

	-GSNV )
		export GIT_SSL_NO_VERIFY=true	# we can decide to ignore that REMOTE_MANIFEST has an invalid certificate...
		;;

	-co )
		echo "*** -co wipe out the 'out' directory ***"
		rm -rf out
		;;

	-c )
		echo "*** -c make clean ***"

		make clean || exit 1
		;;

	-u )	# sync and apply local patches

		echo "*** syncing replicant-$REPLICANT ***"
		../$TOOLS/repo sync gta04-replicant.git gta04-replicant-device.git gta04-replicant-vendor.git gta04-kernel.git || exit 1
		vendor/replicant/get-prebuilts
		;;

	-sf )	# sync force and apply all patches
		echo "*** syncing replicant-$REPLICANT ***"
		../$TOOLS/repo sync --force-sync || exit 1
		vendor/replicant/get-prebuilts
		;;

	-sb )	# sync broken and apply all patches
		echo "*** syncing replicant-$REPLICANT ***"
		../$TOOLS/repo sync -j 1 --force-broken || exit 1
		vendor/replicant/get-prebuilts
		;;

	-s )	# sync and apply all patches
		### echo "### Download the Source + Extensions"
		echo "*** syncing replicant-$REPLICANT ***"
		../$TOOLS/repo sync || exit 1
		vendor/replicant/get-prebuilts
		;;

# FIXME: should we require to specify the branch name $VERSION as -r parameter?
# first sync should automatically fetch this manifest
	-r* )
		MV=$(expr "$1" : "-r\(.*\)")
		[ "\$MV" ] && MANIFESTVERSION="\$MV"	# overwrite
		### echo "### Setup the Goldelico extensions (Local Manifest)"
		echo "*** installing remote GTA04 manifest gta04-replicant-$REPLICANT$MANIFESTVERSION.xml from branch $VERSION ***"
		mkdir -p .repo/local_manifests
		MANIFEST="http://git.goldelico.com/?p=gta04-replicant.git;a=blob_plain;f=local_manifests/gta04-replicant-$REPLICANT$MANIFESTVERSION.xml;hb=refs/heads/$VERSION"
# echo $VERSION
# echo $MANIFEST
		wget -O - "\$MANIFEST" > .repo/local_manifests/gta04.xml
		rm -f .repo/local_manifests/local-dev.xml	# disable any localhost git
		;;

# FIXME: require to specify the local file $LOCAL_MANIFEST as -l parameter?
	-l )
		echo "*** using manifest to access localhost ***"

		echo "broken"; exit 1

		# name of local manifest must come after "gta04.xml" to be able to overwrite
		cp $LOCAL_MANIFEST .repo/local_manifests/local-dev.xml	# enable localhost git
		;;

	-d )
		SHOWCOMMANDS=showcommands
		;;

	"-?" )
		usage
		exit 1
		;;

	* )
		break
		;;

	esac
	shift
done

echo "### Build Replicant/Android"

# pass from driver script to remote ssh shell
export JAVA_HOME=\$(readlink -f /usr/bin/java | sed "s:bin/java::")
export ANDROID_JAVA_HOME=\$JAVA_HOME
#echo A:$JAVA_HOME B:\$JAVA_HOME
#echo A:$ANDROID_JAVA_HOME B:\$ANDROID_JAVA_HOME

# help host detection since uname -sm fails
cp build/core/combo/HOST_linux-x86.mk build/core/combo/HOST_linux-arm.mk
export HOST_ARCH=arm

source build/envsetup.sh
lunch replicant_gta04-eng

LOADADDR=0x80008000 make -j4 bootimage
make -j4 systemtarball

ls -l out/target/product/gta04/kernel out/target/product/gta04/system.tar.bz2 out/target/product/gta04/root/

echo "### Create single partion system image for GTA04"

goldelico/scripts/mkrootfs.sh

ls -l out/target/product/gta04/gta04-rootfs.tar.bz2

END

# pull out/target/product/gta04/gta04-rootfs.tar.bz2 and upload to server

ssh -o StrictHostKeyChecking=no $DEVICE sh -c "; cat $DIR/out/target/product/gta04/gta04-rootfs.tar.bz2" >./$OUTFILE

ls -l ./$OUTFILE

# rsync to server using $REPLICANT prefix

